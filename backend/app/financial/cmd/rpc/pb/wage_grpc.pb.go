// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: wage.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wage_CalWage_FullMethodName = "/pb.wage/calWage"
)

// WageClient is the client API for Wage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WageClient interface {
	CalWage(ctx context.Context, in *CalReq, opts ...grpc.CallOption) (*CalResp, error)
}

type wageClient struct {
	cc grpc.ClientConnInterface
}

func NewWageClient(cc grpc.ClientConnInterface) WageClient {
	return &wageClient{cc}
}

func (c *wageClient) CalWage(ctx context.Context, in *CalReq, opts ...grpc.CallOption) (*CalResp, error) {
	out := new(CalResp)
	err := c.cc.Invoke(ctx, Wage_CalWage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WageServer is the server API for Wage service.
// All implementations must embed UnimplementedWageServer
// for forward compatibility
type WageServer interface {
	CalWage(context.Context, *CalReq) (*CalResp, error)
	mustEmbedUnimplementedWageServer()
}

// UnimplementedWageServer must be embedded to have forward compatible implementations.
type UnimplementedWageServer struct {
}

func (UnimplementedWageServer) CalWage(context.Context, *CalReq) (*CalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalWage not implemented")
}
func (UnimplementedWageServer) mustEmbedUnimplementedWageServer() {}

// UnsafeWageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WageServer will
// result in compilation errors.
type UnsafeWageServer interface {
	mustEmbedUnimplementedWageServer()
}

func RegisterWageServer(s grpc.ServiceRegistrar, srv WageServer) {
	s.RegisterService(&Wage_ServiceDesc, srv)
}

func _Wage_CalWage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WageServer).CalWage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wage_CalWage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WageServer).CalWage(ctx, req.(*CalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wage_ServiceDesc is the grpc.ServiceDesc for Wage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.wage",
	HandlerType: (*WageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "calWage",
			Handler:    _Wage_CalWage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wage.proto",
}
